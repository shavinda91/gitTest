
lcd_interface.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008c  00800100  000003f6  0000046a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003f6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         000006cc  00000000  00000000  000004f8  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000097  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      0000002f  00000000  00000000  00000c5b  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000c8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b8d  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000341  00000000  00000000  0000187f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f5  00000000  00000000  00001bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f8  00000000  00000000  000020b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000001b9  00000000  00000000  000021b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004d9  00000000  00000000  00002369  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000060  00000000  00000000  00002842  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ef       	ldi	r30, 0xF6	; 246
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 38       	cpi	r26, 0x8C	; 140
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 66 01 	call	0x2cc	; 0x2cc <main>
  8e:	0c 94 f9 01 	jmp	0x3f2	; 0x3f2 <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=(~(0x0f<<LCD_DATA_POS));
  96:	84 b1       	in	r24, 0x04	; 4
  98:	80 7f       	andi	r24, 0xF0	; 240
  9a:	84 b9       	out	0x04, r24	; 4

	//change LCD mode
	SET_RW();		//Read mode
  9c:	5e 9a       	sbi	0x0b, 6	; 11
	CLEAR_RS();		//Read status
  9e:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a0:	00 00       	nop

	
	do
	{

		SET_E();
  a2:	2c 9a       	sbi	0x05, 4	; 5
  a4:	00 00       	nop

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=(LCD_DATA_PIN>>LCD_DATA_POS);
  a6:	83 b1       	in	r24, 0x03	; 3
		status=status<<4;
  a8:	82 95       	swap	r24
  aa:	80 7f       	andi	r24, 0xF0	; 240
  ac:	00 00       	nop

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
  ae:	2c 98       	cbi	0x05, 4	; 5
  b0:	00 00       	nop
		_delay_us(1);	//tEL

		SET_E();
  b2:	2c 9a       	sbi	0x05, 4	; 5
  b4:	00 00       	nop
		_delay_us(0.5);

		temp=(LCD_DATA_PIN>>LCD_DATA_POS);
  b6:	93 b1       	in	r25, 0x03	; 3
  b8:	00 00       	nop
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
  ba:	2c 98       	cbi	0x05, 4	; 5
  bc:	00 00       	nop
		_delay_us(1);	//tEL
	}while(busy);
  be:	88 23       	and	r24, r24
  c0:	84 f3       	brlt	.-32     	; 0xa2 <LCDBusyLoop+0xc>

	CLEAR_RW();		//write mode
  c2:	5e 98       	cbi	0x0b, 6	; 11
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
  c4:	84 b1       	in	r24, 0x04	; 4
  c6:	8f 60       	ori	r24, 0x0F	; 15
  c8:	84 b9       	out	0x04, r24	; 4
  ca:	08 95       	ret

000000cc <LCDByte>:
//NOTE: THIS FUNCTION RETURS ONLY WHEN LCD HAS PROCESSED THE COMMAND

uint8_t hn,ln;			//Nibbles
uint8_t temp;

hn=c>>4;
  cc:	28 2f       	mov	r18, r24
  ce:	22 95       	swap	r18
  d0:	2f 70       	andi	r18, 0x0F	; 15
ln=(c & 0x0F);
  d2:	8f 70       	andi	r24, 0x0F	; 15

if(isdata==0)
  d4:	61 11       	cpse	r22, r1
  d6:	02 c0       	rjmp	.+4      	; 0xdc <LCDByte+0x10>
	CLEAR_RS();
  d8:	5b 98       	cbi	0x0b, 3	; 11
  da:	01 c0       	rjmp	.+2      	; 0xde <LCDByte+0x12>
else
	SET_RS();
  dc:	5b 9a       	sbi	0x0b, 3	; 11
  de:	00 00       	nop

_delay_us(0.500);		//tAS

SET_E();
  e0:	2c 9a       	sbi	0x05, 4	; 5

//Send high nibble

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((hn<<LCD_DATA_POS));
  e2:	95 b1       	in	r25, 0x05	; 5
  e4:	90 7f       	andi	r25, 0xF0	; 240
  e6:	92 2b       	or	r25, r18
LCD_DATA_PORT=temp;
  e8:	95 b9       	out	0x05, r25	; 5
  ea:	00 00       	nop

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
  ec:	2c 98       	cbi	0x05, 4	; 5
  ee:	00 00       	nop

_delay_us(1);

//Send the lower nibble
SET_E();
  f0:	2c 9a       	sbi	0x05, 4	; 5

temp=(LCD_DATA_PORT & (~(0X0F<<LCD_DATA_POS)))|((ln<<LCD_DATA_POS));
  f2:	95 b1       	in	r25, 0x05	; 5
  f4:	90 7f       	andi	r25, 0xF0	; 240
  f6:	89 2b       	or	r24, r25

LCD_DATA_PORT=temp;
  f8:	85 b9       	out	0x05, r24	; 5
  fa:	00 00       	nop

_delay_us(1);			//tEH

//SEND

CLEAR_E();
  fc:	2c 98       	cbi	0x05, 4	; 5
  fe:	00 00       	nop

_delay_us(1);			//tEL

LCDBusyLoop();
 100:	0e 94 4b 00 	call	0x96	; 0x96 <LCDBusyLoop>
 104:	08 95       	ret

00000106 <LCDWriteString>:
	
	LCDGotoXY(0,0);

}
void LCDWriteString(const char *msg)
{
 106:	0f 93       	push	r16
 108:	1f 93       	push	r17
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	8c 01       	movw	r16, r24
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 110:	fc 01       	movw	r30, r24
 112:	80 81       	ld	r24, Z
 114:	88 23       	and	r24, r24
 116:	09 f1       	breq	.+66     	; 0x15a <LCDWriteString+0x54>
 {
 	//Custom Char Support
	if(*msg=='%')
 118:	85 32       	cpi	r24, 0x25	; 37
 11a:	a9 f4       	brne	.+42     	; 0x146 <LCDWriteString+0x40>
	{
		msg++;
 11c:	e8 01       	movw	r28, r16
 11e:	21 96       	adiw	r28, 0x01	; 1
		int8_t cc=*msg-'0';
 120:	f8 01       	movw	r30, r16
 122:	81 81       	ldd	r24, Z+1	; 0x01
 124:	80 53       	subi	r24, 0x30	; 48

		if(cc>=0 && cc<=7)
 126:	88 30       	cpi	r24, 0x08	; 8
 128:	20 f4       	brcc	.+8      	; 0x132 <LCDWriteString+0x2c>
		{
			LCDData(cc);
 12a:	61 e0       	ldi	r22, 0x01	; 1
 12c:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
 130:	0e c0       	rjmp	.+28     	; 0x14e <LCDWriteString+0x48>
		}
		else
		{
			LCDData('%');
 132:	61 e0       	ldi	r22, 0x01	; 1
 134:	85 e2       	ldi	r24, 0x25	; 37
 136:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
			LCDData(*msg);
 13a:	61 e0       	ldi	r22, 0x01	; 1
 13c:	f8 01       	movw	r30, r16
 13e:	81 81       	ldd	r24, Z+1	; 0x01
 140:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
 144:	04 c0       	rjmp	.+8      	; 0x14e <LCDWriteString+0x48>
		}
	}
	else
	{
		LCDData(*msg);
 146:	61 e0       	ldi	r22, 0x01	; 1
 148:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
 14c:	e8 01       	movw	r28, r16
	}
	msg++;
 14e:	8e 01       	movw	r16, r28
 150:	0f 5f       	subi	r16, 0xFF	; 255
 152:	1f 4f       	sbci	r17, 0xFF	; 255
		
	In the same way you can insert any syblom numbered 0-7 	


	*****************************************************************/
 while(*msg!='\0')
 154:	89 81       	ldd	r24, Y+1	; 0x01
 156:	81 11       	cpse	r24, r1
 158:	df cf       	rjmp	.-66     	; 0x118 <LCDWriteString+0x12>
	{
		LCDData(*msg);
	}
	msg++;
 }
}
 15a:	df 91       	pop	r29
 15c:	cf 91       	pop	r28
 15e:	1f 91       	pop	r17
 160:	0f 91       	pop	r16
 162:	08 95       	ret

00000164 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 164:	ef 92       	push	r14
 166:	ff 92       	push	r15
 168:	0f 93       	push	r16
 16a:	1f 93       	push	r17
 16c:	cf 93       	push	r28
 16e:	df 93       	push	r29
 170:	00 d0       	rcall	.+0      	; 0x172 <LCDWriteInt+0xe>
 172:	00 d0       	rcall	.+0      	; 0x174 <LCDWriteInt+0x10>
 174:	1f 92       	push	r1
 176:	cd b7       	in	r28, 0x3d	; 61
 178:	de b7       	in	r29, 0x3e	; 62
 17a:	7b 01       	movw	r14, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 17c:	fe 01       	movw	r30, r28
 17e:	31 96       	adiw	r30, 0x01	; 1
 180:	25 e0       	ldi	r18, 0x05	; 5
 182:	df 01       	movw	r26, r30
 184:	1d 92       	st	X+, r1
 186:	2a 95       	dec	r18
 188:	e9 f7       	brne	.-6      	; 0x184 <LCDWriteInt+0x20>
	int i=4,j=0;
	while(val)
 18a:	00 97       	sbiw	r24, 0x00	; 0
 18c:	61 f0       	breq	.+24     	; 0x1a6 <LCDWriteInt+0x42>
 18e:	fe 01       	movw	r30, r28
 190:	36 96       	adiw	r30, 0x06	; 6
	{
	str[i]=val%10;
 192:	2a e0       	ldi	r18, 0x0A	; 10
 194:	30 e0       	ldi	r19, 0x00	; 0
 196:	b9 01       	movw	r22, r18
 198:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <__divmodhi4>
 19c:	82 93       	st	-Z, r24
	val=val/10;
 19e:	86 2f       	mov	r24, r22
 1a0:	97 2f       	mov	r25, r23

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 1a2:	00 97       	sbiw	r24, 0x00	; 0
 1a4:	c1 f7       	brne	.-16     	; 0x196 <LCDWriteInt+0x32>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 1a6:	bf ef       	ldi	r27, 0xFF	; 255
 1a8:	eb 16       	cp	r14, r27
 1aa:	fb 06       	cpc	r15, r27
 1ac:	69 f4       	brne	.+26     	; 0x1c8 <LCDWriteInt+0x64>
		while(str[j]==0) j++;
 1ae:	29 81       	ldd	r18, Y+1	; 0x01
 1b0:	21 11       	cpse	r18, r1
 1b2:	0f c0       	rjmp	.+30     	; 0x1d2 <LCDWriteInt+0x6e>
 1b4:	fe 01       	movw	r30, r28
 1b6:	32 96       	adiw	r30, 0x02	; 2
 1b8:	00 e0       	ldi	r16, 0x00	; 0
 1ba:	10 e0       	ldi	r17, 0x00	; 0
 1bc:	0f 5f       	subi	r16, 0xFF	; 255
 1be:	1f 4f       	sbci	r17, 0xFF	; 255
 1c0:	21 91       	ld	r18, Z+
 1c2:	22 23       	and	r18, r18
 1c4:	d9 f3       	breq	.-10     	; 0x1bc <LCDWriteInt+0x58>
 1c6:	07 c0       	rjmp	.+14     	; 0x1d6 <LCDWriteInt+0x72>
	else
		j=5-field_length;
 1c8:	05 e0       	ldi	r16, 0x05	; 5
 1ca:	10 e0       	ldi	r17, 0x00	; 0
 1cc:	0e 19       	sub	r16, r14
 1ce:	1f 09       	sbc	r17, r15
 1d0:	02 c0       	rjmp	.+4      	; 0x1d6 <LCDWriteInt+0x72>
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
		while(str[j]==0) j++;
 1d2:	00 e0       	ldi	r16, 0x00	; 0
 1d4:	10 e0       	ldi	r17, 0x00	; 0
	else
		j=5-field_length;

	if(val<0) LCDData('-');
 1d6:	99 23       	and	r25, r25
 1d8:	24 f4       	brge	.+8      	; 0x1e2 <LCDWriteInt+0x7e>
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	8d e2       	ldi	r24, 0x2D	; 45
 1de:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
	for(i=j;i<5;i++)
 1e2:	05 30       	cpi	r16, 0x05	; 5
 1e4:	11 05       	cpc	r17, r1
 1e6:	a4 f4       	brge	.+40     	; 0x210 <LCDWriteInt+0xac>
	}
	msg++;
 }
}

void LCDWriteInt(int val,unsigned int field_length)
 1e8:	e1 e0       	ldi	r30, 0x01	; 1
 1ea:	f0 e0       	ldi	r31, 0x00	; 0
 1ec:	ec 0f       	add	r30, r28
 1ee:	fd 1f       	adc	r31, r29
 1f0:	0e 0f       	add	r16, r30
 1f2:	1f 1f       	adc	r17, r31
 1f4:	7e 01       	movw	r14, r28
 1f6:	f6 e0       	ldi	r31, 0x06	; 6
 1f8:	ef 0e       	add	r14, r31
 1fa:	f1 1c       	adc	r15, r1
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 1fc:	d8 01       	movw	r26, r16
 1fe:	8d 91       	ld	r24, X+
 200:	8d 01       	movw	r16, r26
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	80 5d       	subi	r24, 0xD0	; 208
 206:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 20a:	0e 15       	cp	r16, r14
 20c:	1f 05       	cpc	r17, r15
 20e:	b1 f7       	brne	.-20     	; 0x1fc <LCDWriteInt+0x98>
	{
	LCDData(48+str[i]);
	}
}
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	0f 90       	pop	r0
 216:	0f 90       	pop	r0
 218:	0f 90       	pop	r0
 21a:	df 91       	pop	r29
 21c:	cf 91       	pop	r28
 21e:	1f 91       	pop	r17
 220:	0f 91       	pop	r16
 222:	ff 90       	pop	r15
 224:	ef 90       	pop	r14
 226:	08 95       	ret

00000228 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 	if(x>=20) return;
 228:	84 31       	cpi	r24, 0x14	; 20
 22a:	78 f4       	brcc	.+30     	; 0x24a <LCDGotoXY+0x22>

	#ifdef LCD_TYPE_204
	
	switch(y)
 22c:	62 30       	cpi	r22, 0x02	; 2
 22e:	31 f0       	breq	.+12     	; 0x23c <LCDGotoXY+0x14>
 230:	63 30       	cpi	r22, 0x03	; 3
 232:	31 f0       	breq	.+12     	; 0x240 <LCDGotoXY+0x18>
 234:	61 30       	cpi	r22, 0x01	; 1
 236:	29 f4       	brne	.+10     	; 0x242 <LCDGotoXY+0x1a>
	{
		case 0:
			break;
		case 1:
			x|=0b01000000;
 238:	80 64       	ori	r24, 0x40	; 64
			break;
 23a:	03 c0       	rjmp	.+6      	; 0x242 <LCDGotoXY+0x1a>
		case 2:
			x+=0x14;
 23c:	8c 5e       	subi	r24, 0xEC	; 236
			break;
 23e:	01 c0       	rjmp	.+2      	; 0x242 <LCDGotoXY+0x1a>
		case 3:
			x+=0x54;
 240:	8c 5a       	subi	r24, 0xAC	; 172
	}

	#endif

	x|=0b10000000;
  	LCDCmd(x);
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 68       	ori	r24, 0x80	; 128
 246:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
 24a:	08 95       	ret

0000024c <LCDInit>:
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
{
 24c:	0f 93       	push	r16
 24e:	1f 93       	push	r17
 250:	cf 93       	push	r28
 252:	df 93       	push	r29
 254:	c8 2f       	mov	r28, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 256:	8b e4       	ldi	r24, 0x4B	; 75
 258:	9d e1       	ldi	r25, 0x1D	; 29
 25a:	01 97       	sbiw	r24, 0x01	; 1
 25c:	f1 f7       	brne	.-4      	; 0x25a <LCDInit+0xe>
 25e:	00 c0       	rjmp	.+0      	; 0x260 <LCDInit+0x14>
 260:	00 00       	nop
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);
 262:	84 b1       	in	r24, 0x04	; 4
 264:	8f 60       	ori	r24, 0x0F	; 15
 266:	84 b9       	out	0x04, r24	; 4
	LCD_E_DDR|=(1<<LCD_E_POS);
 268:	24 9a       	sbi	0x04, 4	; 4
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 26a:	53 9a       	sbi	0x0a, 3	; 10
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 26c:	56 9a       	sbi	0x0a, 6	; 10

	LCD_DATA_PORT&=(~(0x0F<<LCD_DATA_POS));
 26e:	85 b1       	in	r24, 0x05	; 5
 270:	80 7f       	andi	r24, 0xF0	; 240
 272:	85 b9       	out	0x05, r24	; 5
	CLEAR_E();
 274:	2c 98       	cbi	0x05, 4	; 5
	CLEAR_RW();
 276:	5e 98       	cbi	0x0b, 6	; 11
	CLEAR_RS();
 278:	5b 98       	cbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 27a:	00 00       	nop

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 27c:	2c 9a       	sbi	0x05, 4	; 5
	LCD_DATA_PORT|=((0b00000010)<<LCD_DATA_POS); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 27e:	29 9a       	sbi	0x05, 1	; 5
 280:	00 00       	nop
	_delay_us(1);
	CLEAR_E();
 282:	2c 98       	cbi	0x05, 4	; 5
 284:	00 00       	nop
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 286:	0e 94 4b 00 	call	0x96	; 0x96 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 28a:	60 e0       	ldi	r22, 0x00	; 0
 28c:	8c 2f       	mov	r24, r28
 28e:	8c 60       	ori	r24, 0x0C	; 12
 290:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 294:	60 e0       	ldi	r22, 0x00	; 0
 296:	88 e2       	ldi	r24, 0x28	; 40
 298:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);
 29c:	60 e0       	ldi	r22, 0x00	; 0
 29e:	80 e4       	ldi	r24, 0x40	; 64
 2a0:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
 2a4:	c0 e0       	ldi	r28, 0x00	; 0
 2a6:	d1 e0       	ldi	r29, 0x01	; 1
	//Change Port to output
	LCD_DATA_DDR|=(0x0F<<LCD_DATA_POS);

}

void LCDInit(uint8_t style)
 2a8:	00 e4       	ldi	r16, 0x40	; 64
 2aa:	11 e0       	ldi	r17, 0x01	; 1
	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
		LCDData(__cgram[__i]);
 2ac:	61 e0       	ldi	r22, 0x01	; 1
 2ae:	89 91       	ld	r24, Y+
 2b0:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>

	/* Custom Char */
	LCDCmd(0b01000000);

	uint8_t __i;
	for(__i=0;__i<sizeof(__cgram);__i++)
 2b4:	c0 17       	cp	r28, r16
 2b6:	d1 07       	cpc	r29, r17
 2b8:	c9 f7       	brne	.-14     	; 0x2ac <LCDInit+0x60>
		LCDData(__cgram[__i]);
	
	LCDGotoXY(0,0);
 2ba:	60 e0       	ldi	r22, 0x00	; 0
 2bc:	80 e0       	ldi	r24, 0x00	; 0
 2be:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>

}
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	1f 91       	pop	r17
 2c8:	0f 91       	pop	r16
 2ca:	08 95       	ret

000002cc <main>:
#include <util/delay.h>

#include "lcd.h"

int main(void)
{
 2cc:	0f 93       	push	r16
 2ce:	1f 93       	push	r17
 2d0:	cf 93       	push	r28
 2d2:	df 93       	push	r29
	unsigned char i;

	//Initialize LCD module
	LCDInit(LS_BLINK|LS_ULINE);
 2d4:	83 e0       	ldi	r24, 0x03	; 3
 2d6:	0e 94 26 01 	call	0x24c	; 0x24c <LCDInit>

	//Clear the screen
	LCDClear();
 2da:	60 e0       	ldi	r22, 0x00	; 0
 2dc:	81 e0       	ldi	r24, 0x01	; 1
 2de:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>

	//Simple string printing
	LCDWriteString("Congrats ");
 2e2:	80 e4       	ldi	r24, 0x40	; 64
 2e4:	91 e0       	ldi	r25, 0x01	; 1
 2e6:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>

	//A string on line 2
	LCDWriteStringXY(0,1,"Loading ");
 2ea:	61 e0       	ldi	r22, 0x01	; 1
 2ec:	80 e0       	ldi	r24, 0x00	; 0
 2ee:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
 2f2:	8a e4       	ldi	r24, 0x4A	; 74
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>
 2fa:	c0 e0       	ldi	r28, 0x00	; 0
 2fc:	d0 e0       	ldi	r29, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 2fe:	00 e0       	ldi	r16, 0x00	; 0
 300:	10 e0       	ldi	r17, 0x00	; 0

	//Print some numbers
	for (i=0;i<99;i+=1)
	{
		LCDWriteIntXY(9,1,i,3);
 302:	61 e0       	ldi	r22, 0x01	; 1
 304:	89 e0       	ldi	r24, 0x09	; 9
 306:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
 30a:	63 e0       	ldi	r22, 0x03	; 3
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	ce 01       	movw	r24, r28
 310:	0e 94 b2 00 	call	0x164	; 0x164 <LCDWriteInt>
		LCDWriteStringXY(12,1,"%");
 314:	61 e0       	ldi	r22, 0x01	; 1
 316:	8c e0       	ldi	r24, 0x0C	; 12
 318:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
 31c:	83 e5       	ldi	r24, 0x53	; 83
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>
 324:	c8 01       	movw	r24, r16
 326:	01 97       	sbiw	r24, 0x01	; 1
 328:	f1 f7       	brne	.-4      	; 0x326 <main+0x5a>
 32a:	c8 01       	movw	r24, r16
 32c:	01 97       	sbiw	r24, 0x01	; 1
 32e:	f1 f7       	brne	.-4      	; 0x32c <main+0x60>
 330:	c8 01       	movw	r24, r16
 332:	01 97       	sbiw	r24, 0x01	; 1
 334:	f1 f7       	brne	.-4      	; 0x332 <main+0x66>
 336:	c8 01       	movw	r24, r16
 338:	01 97       	sbiw	r24, 0x01	; 1
 33a:	f1 f7       	brne	.-4      	; 0x338 <main+0x6c>
 33c:	21 96       	adiw	r28, 0x01	; 1

	//A string on line 2
	LCDWriteStringXY(0,1,"Loading ");

	//Print some numbers
	for (i=0;i<99;i+=1)
 33e:	c3 36       	cpi	r28, 0x63	; 99
 340:	d1 05       	cpc	r29, r1
 342:	f9 f6       	brne	.-66     	; 0x302 <main+0x36>
		_delay_loop_2(0);

	}

	//Clear the screen
	LCDClear();
 344:	60 e0       	ldi	r22, 0x00	; 0
 346:	81 e0       	ldi	r24, 0x01	; 1
 348:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>

	//Some more text

	LCDWriteString("Hello world");
 34c:	85 e5       	ldi	r24, 0x55	; 85
 34e:	91 e0       	ldi	r25, 0x01	; 1
 350:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>
	LCDWriteStringXY(0,1,"By YourName Here");    // <--- Write ur NAME HERE !!!!!!!!!!!
 354:	61 e0       	ldi	r22, 0x01	; 1
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
 35c:	81 e6       	ldi	r24, 0x61	; 97
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>
 364:	44 e6       	ldi	r20, 0x64	; 100
 366:	20 e0       	ldi	r18, 0x00	; 0
 368:	30 e0       	ldi	r19, 0x00	; 0
 36a:	c9 01       	movw	r24, r18
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	f1 f7       	brne	.-4      	; 0x36c <main+0xa0>
 370:	41 50       	subi	r20, 0x01	; 1

	//Wait
	for(i=0;i<100;i++) _delay_loop_2(0);
 372:	d9 f7       	brne	.-10     	; 0x36a <main+0x9e>

	//Some More ......
	LCDClear();
 374:	60 e0       	ldi	r22, 0x00	; 0
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0e 94 66 00 	call	0xcc	; 0xcc <LCDByte>
	LCDWriteString("    eXtreme");
 37c:	82 e7       	ldi	r24, 0x72	; 114
 37e:	91 e0       	ldi	r25, 0x01	; 1
 380:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>
	LCDWriteStringXY(0,1,"  Electronics");
 384:	61 e0       	ldi	r22, 0x01	; 1
 386:	80 e0       	ldi	r24, 0x00	; 0
 388:	0e 94 14 01 	call	0x228	; 0x228 <LCDGotoXY>
 38c:	8e e7       	ldi	r24, 0x7E	; 126
 38e:	91 e0       	ldi	r25, 0x01	; 1
 390:	0e 94 83 00 	call	0x106	; 0x106 <LCDWriteString>
	
	return 0;
 394:	80 e0       	ldi	r24, 0x00	; 0
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	df 91       	pop	r29
 39a:	cf 91       	pop	r28
 39c:	1f 91       	pop	r17
 39e:	0f 91       	pop	r16
 3a0:	08 95       	ret

000003a2 <__divmodhi4>:
 3a2:	97 fb       	bst	r25, 7
 3a4:	07 2e       	mov	r0, r23
 3a6:	16 f4       	brtc	.+4      	; 0x3ac <__divmodhi4+0xa>
 3a8:	00 94       	com	r0
 3aa:	07 d0       	rcall	.+14     	; 0x3ba <__divmodhi4_neg1>
 3ac:	77 fd       	sbrc	r23, 7
 3ae:	09 d0       	rcall	.+18     	; 0x3c2 <__divmodhi4_neg2>
 3b0:	0e 94 e5 01 	call	0x3ca	; 0x3ca <__udivmodhi4>
 3b4:	07 fc       	sbrc	r0, 7
 3b6:	05 d0       	rcall	.+10     	; 0x3c2 <__divmodhi4_neg2>
 3b8:	3e f4       	brtc	.+14     	; 0x3c8 <__divmodhi4_exit>

000003ba <__divmodhi4_neg1>:
 3ba:	90 95       	com	r25
 3bc:	81 95       	neg	r24
 3be:	9f 4f       	sbci	r25, 0xFF	; 255
 3c0:	08 95       	ret

000003c2 <__divmodhi4_neg2>:
 3c2:	70 95       	com	r23
 3c4:	61 95       	neg	r22
 3c6:	7f 4f       	sbci	r23, 0xFF	; 255

000003c8 <__divmodhi4_exit>:
 3c8:	08 95       	ret

000003ca <__udivmodhi4>:
 3ca:	aa 1b       	sub	r26, r26
 3cc:	bb 1b       	sub	r27, r27
 3ce:	51 e1       	ldi	r21, 0x11	; 17
 3d0:	07 c0       	rjmp	.+14     	; 0x3e0 <__udivmodhi4_ep>

000003d2 <__udivmodhi4_loop>:
 3d2:	aa 1f       	adc	r26, r26
 3d4:	bb 1f       	adc	r27, r27
 3d6:	a6 17       	cp	r26, r22
 3d8:	b7 07       	cpc	r27, r23
 3da:	10 f0       	brcs	.+4      	; 0x3e0 <__udivmodhi4_ep>
 3dc:	a6 1b       	sub	r26, r22
 3de:	b7 0b       	sbc	r27, r23

000003e0 <__udivmodhi4_ep>:
 3e0:	88 1f       	adc	r24, r24
 3e2:	99 1f       	adc	r25, r25
 3e4:	5a 95       	dec	r21
 3e6:	a9 f7       	brne	.-22     	; 0x3d2 <__udivmodhi4_loop>
 3e8:	80 95       	com	r24
 3ea:	90 95       	com	r25
 3ec:	bc 01       	movw	r22, r24
 3ee:	cd 01       	movw	r24, r26
 3f0:	08 95       	ret

000003f2 <_exit>:
 3f2:	f8 94       	cli

000003f4 <__stop_program>:
 3f4:	ff cf       	rjmp	.-2      	; 0x3f4 <__stop_program>
